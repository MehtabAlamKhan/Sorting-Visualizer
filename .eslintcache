[{"D:\\games\\Projects\\sv-my\\src\\index.js":"1","D:\\games\\Projects\\sv-my\\src\\App.js":"2","D:\\games\\Projects\\sv-my\\src\\reportWebVitals.js":"3","D:\\games\\Projects\\sv-my\\src\\Components\\SortingVisualizer.jsx":"4","D:\\games\\Projects\\sv-my\\src\\Components\\SortingAlogorithms.js":"5"},{"size":511,"mtime":1610441108576,"results":"6","hashOfConfig":"7"},{"size":224,"mtime":1610270563714,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":16818,"mtime":1610450049367,"results":"10","hashOfConfig":"7"},{"size":9356,"mtime":1610442023652,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"bn39cx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\games\\Projects\\sv-my\\src\\index.js",[],["24","25"],"D:\\games\\Projects\\sv-my\\src\\App.js",[],"D:\\games\\Projects\\sv-my\\src\\reportWebVitals.js",[],"D:\\games\\Projects\\sv-my\\src\\Components\\SortingVisualizer.jsx",["26","27","28","29"],"import \"./styles/SortingVisualizer.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport * as SortingAlgorithms from \"./SortingAlogorithms.js\";\r\n\r\nconst TIMER = 10;\r\nvar timer;\r\n\r\nfunction SortingVisualizer() {\r\n  const [array, setArray] = useState([]);\r\n  const [disableButton, setdisableButton] = useState(false);\r\n  const [auxArray, setAuxArray] = useState([]);\r\n  const [slider, setSlider] = useState(51);\r\n  const [width, setWidth] = useState(4);\r\n  const [order, setOrder] = useState(\"asc\");\r\n  const [time, setTime] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"disabling effect called\");\r\n    setdisableButton(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Reset array Effect called\");\r\n    var array = resetArray();\r\n    setArray(array);\r\n    var auxArray = array.map((v) => v);\r\n    setAuxArray(auxArray);\r\n  }, [slider]);\r\n\r\n  const resetArray = () => {\r\n    console.log(\"reset func called\");\r\n    var array = [];\r\n\r\n    if (slider <= 30) {\r\n      for (let i = 0; i < 25; i++) {\r\n        array.push(randomNumbers(5, window.screen.height - 300));\r\n      }\r\n      setWidth(35);\r\n    } else if (slider > 25 && slider <= 50) {\r\n      for (let i = 0; i < 70; i++) {\r\n        array.push(randomNumbers(5, window.screen.height - 300));\r\n      }\r\n      setWidth(15);\r\n    } else if (slider > 50 && slider <= 75) {\r\n      for (let i = 0; i < 90; i++) {\r\n        array.push(randomNumbers(5, window.screen.height - 300));\r\n      }\r\n      setWidth(6);\r\n    } else {\r\n      for (let i = 0; i < 150; i++) {\r\n        array.push(randomNumbers(5, window.screen.height - 300));\r\n      }\r\n      if (window.screen.width < 1090) {\r\n        setWidth(15);\r\n      } else {\r\n        setWidth(3);\r\n      }\r\n    }\r\n    changeColor();\r\n    var auxArray = array.map((v) => v);\r\n    setAuxArray(auxArray);\r\n    setName(\"\");\r\n    setTime(0);\r\n    return array;\r\n  };\r\n\r\n  const changeColor = () => {\r\n    const arr = array;\r\n    const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const barStyle = arrayBars[i].style;\r\n      barStyle.backgroundColor = \"turquoise\";\r\n    }\r\n  };\r\n\r\n  // const stopAndReset = () => {\r\n  //   clearTimeout(timer);\r\n  //   setArray(resetArray());\r\n  // };\r\n\r\n  const mergeSort = () => {\r\n    setdisableButton(true);\r\n    let start = new Date();\r\n    const animations = SortingAlgorithms.mergeSort(auxArray, order);\r\n    // console.log(animations);\r\n\r\n    const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n    var myNum = 1;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (animations[i].length === 3) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if (myNum === 1) {\r\n          myNum = 2;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"blue\";\r\n            barTwoStyle.backgroundColor = \"blue\";\r\n          }, i * TIMER);\r\n        } else if (myNum === 2) {\r\n          myNum = 3;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"yellow\";\r\n            barTwoStyle.backgroundColor = \"yellow\";\r\n          }, i * TIMER);\r\n        } else if (myNum === 3) {\r\n          myNum = 1;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"turquoise\";\r\n            barTwoStyle.backgroundColor = \"turquoise\";\r\n          }, i * TIMER);\r\n        }\r\n      } else if (animations[i].length === 4) {\r\n        timer = setTimeout(() => {\r\n          const [barOneIdx, barTwoIdx, newHeight, ,] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n          barOneStyle.backgroundColor = \"#ff9ee6\";\r\n          barTwoStyle.backgroundColor = \"#ff9ee6\";\r\n        }, i * TIMER);\r\n      }\r\n      if (i === animations.length - 1) {\r\n        timer = setTimeout(() => {\r\n          setName(\"Merge\");\r\n          let end = new Date();\r\n          let t = (end.getTime() - start.getTime()) / 1000;\r\n          setTime(t);\r\n          setdisableButton(false);\r\n        }, i * TIMER + 100);\r\n      }\r\n    }\r\n  };\r\n\r\n  const quickSort = () => {\r\n    let start = new Date();\r\n    setdisableButton(true);\r\n    const ani = SortingAlgorithms.QuickSortCall(auxArray, order);\r\n    const animations = ani.animation;\r\n    const animations2 = ani.animation2;\r\n    console.log(animations);\r\n\r\n    const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n    var isChange = true;\r\n    var myNum = 1;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (animations[i].length === 4) {\r\n        const [barOneIdx, barTwoIdx, small, large] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${small}px`;\r\n          barTwoStyle.height = `${large}px`;\r\n        }, i * TIMER);\r\n      } else if (animations[i].length === 5) {\r\n        const [barOneIdx, barTwoIdx, small, large, ,] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${small}px`;\r\n          barTwoStyle.height = `${large}px`;\r\n          barTwoStyle.backgroundColor = \"#ff9ee6\";\r\n          if (i === animations.length - 1) {\r\n            barTwoStyle.backgroundColor = \"#ff9ee6\";\r\n          }\r\n        }, i * TIMER);\r\n      } else if (animations[i].length === 2) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if (myNum === 1) {\r\n          myNum = 2;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"#ff0000\";\r\n            barTwoStyle.backgroundColor = \"#ff0000\";\r\n          }, i * TIMER);\r\n        } else if (myNum === 2) {\r\n          myNum = 3;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"yellow\";\r\n            barTwoStyle.backgroundColor = \"yellow\";\r\n          }, i * TIMER);\r\n        } else {\r\n          myNum = 1;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"turquoise\";\r\n            barTwoStyle.backgroundColor = \"turquoise\";\r\n          }, i * TIMER);\r\n        }\r\n      }\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          setName(\"Quick\");\r\n          let end = new Date();\r\n          let t = (end.getTime() - start.getTime()) / 1000;\r\n          setTime(t);\r\n          setdisableButton(false);\r\n        }, i * TIMER + 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const bubbleSort = () => {\r\n    let start = new Date();\r\n    setdisableButton(true);\r\n    const animations = SortingAlgorithms.bubbleSortCall(auxArray, order);\r\n    var myNum = 1;\r\n    const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (animations[i].length === 4) {\r\n        const [barOneIdx, barTwoIdx, small, large] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${small}px`;\r\n          barTwoStyle.height = `${large}px`;\r\n          barTwoStyle.backgroundColor = \"#ff9ee6\";\r\n          if (i === animations.length - 1) {\r\n            barOneStyle.backgroundColor = \"#ff9ee6\";\r\n          }\r\n        }, i * TIMER);\r\n      } else if (animations[i].length === 2) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if (myNum === 1) {\r\n          myNum = 2;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"red\";\r\n            barTwoStyle.backgroundColor = \"red\";\r\n          }, i * TIMER);\r\n        } else if (myNum === 2) {\r\n          myNum = 3;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"yellow\";\r\n            barTwoStyle.backgroundColor = \"ywllow\";\r\n          }, i * TIMER);\r\n        } else {\r\n          myNum = 1;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"turquoise\";\r\n            barTwoStyle.backgroundColor = \"turquoise\";\r\n          }, i * TIMER);\r\n        }\r\n      }\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          setName(\"Bubble\");\r\n          let end = new Date();\r\n          let t = (end.getTime() - start.getTime()) / 1000;\r\n          setTime(t);\r\n          setdisableButton(false);\r\n        }, i * TIMER + 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const heapSort = () => {\r\n    let start = new Date();\r\n    setdisableButton(true);\r\n    const animations = SortingAlgorithms.heapSortCall(auxArray, order);\r\n    var myNum = 1;\r\n    const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      // console.log(animations[i].length);\r\n      if (animations[i].length === 4) {\r\n        const [barOneIdx, barTwoIdx, small, large] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${small}px`;\r\n          barTwoStyle.height = `${large}px`;\r\n          barTwoStyle.backgroundColor = \"red\";\r\n          setTimeout(() => {\r\n            barTwoStyle.backgroundColor = \"#ff9ee6\";\r\n          }, i * 0.1);\r\n          if (i === animations.length - 1) {\r\n            barOneStyle.backgroundColor = \"#ff9ee6\";\r\n          }\r\n          // barTwoStyle.backgroundColor = \"red\";\r\n        }, i * TIMER);\r\n      } else if (animations[i].length === 2) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if (myNum === 1) {\r\n          myNum = 2;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"red\";\r\n            barTwoStyle.backgroundColor = \"red\";\r\n          }, i * TIMER);\r\n        } else if (myNum === 2) {\r\n          myNum = 3;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"yellow\";\r\n            barTwoStyle.backgroundColor = \"yellow\";\r\n          }, i * TIMER);\r\n        } else if (myNum === 3) {\r\n          myNum = 1;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"turquoise\";\r\n            barTwoStyle.backgroundColor = \"turquoise\";\r\n          }, i * TIMER);\r\n        }\r\n      } else {\r\n        const [barOneIdx, barTwoIdx, h1, h2, ,] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${h1}px`;\r\n          barTwoStyle.height = `${h2}px`;\r\n        }, i * TIMER);\r\n      }\r\n\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          setName(\"Heap\");\r\n          let end = new Date();\r\n          let t = (end.getTime() - start.getTime()) / 1000;\r\n          setTime(t);\r\n          setdisableButton(false);\r\n        }, i * TIMER + 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const insertionSort = () => {\r\n    let start = new Date();\r\n    setdisableButton(true);\r\n    const animations = SortingAlgorithms.insertionSortCall(auxArray, order);\r\n    var isChange = true;\r\n    const arrayBars = document.getElementsByClassName(\"array-bars\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (animations[i].length === 2) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if (isChange) {\r\n          isChange = false;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"red\";\r\n            barTwoStyle.backgroundColor = \"red\";\r\n          }, i * TIMER);\r\n        } else {\r\n          isChange = true;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = \"#95e775\";\r\n            barTwoStyle.backgroundColor = \"#95e775\";\r\n          }, i * TIMER);\r\n        }\r\n      } else if (animations[i].length === 4) {\r\n        const [barOneIdx, barTwoIdx, small, large] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${small}px`;\r\n          barTwoStyle.height = `${large}px`;\r\n          barOneStyle.backgroundColor = \"#ff9ee6\";\r\n          barTwoStyle.backgroundColor = \"#ff9ee6\";\r\n          arrayBars[0].style.backgroundColor = \"#ff9ee6\";\r\n        }, i * TIMER);\r\n        // } else {\r\n        //   const [barOneIdx, h, ,] = animations[i];\r\n        //   const barOneStyle = arrayBars[barOneIdx].style;\r\n        //   setTimeout(() => {\r\n        //     barOneStyle.backgroundColor = \"#ff00ea\";\r\n        //     // setTimeout(() => {\r\n        //     //   barOneStyle.backgroundColor = \"#ff9ee6\";\r\n        //     // }, 1000);\r\n        //   }, i * TIMER);\r\n      }\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          setName(\"Insertion\");\r\n          let end = new Date();\r\n          let t = (end.getTime() - start.getTime()) / 1000;\r\n          setTime(t);\r\n          setdisableButton(false);\r\n        }, i * TIMER + 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"nav-bar\">\r\n        <button\r\n          className=\"reset\"\r\n          disabled={disableButton}\r\n          onClick={() => setArray(resetArray())}\r\n        >\r\n          Reset Array\r\n        </button>\r\n        {/* <button className=\"s-reset\" onClick={() => stopAndReset()}>\r\n          Stop And Reset\r\n        </button> */}\r\n        <input\r\n          disabled={disableButton}\r\n          type=\"range\"\r\n          className=\"slider\"\r\n          value={slider}\r\n          min=\"0\"\r\n          max=\"100\"\r\n          onChange={(e) => {\r\n            setSlider(e.target.value);\r\n            setArray(array);\r\n          }}\r\n        />\r\n        <div className=\"ord\">\r\n          <input\r\n            disabled={disableButton}\r\n            type=\"checkbox\"\r\n            className=\"asc\"\r\n            name=\"asc\"\r\n            value=\"asc\"\r\n            checked={order === \"asc\" ? true : false}\r\n            onChange={(e) => setOrder(e.target.value)}\r\n          />\r\n          <label className=\"asc\" htmlFor=\"asc\">\r\n            ASC\r\n          </label>\r\n          <input\r\n            disabled={disableButton}\r\n            type=\"checkbox\"\r\n            className=\"dsc\"\r\n            id=\"dscc\"\r\n            name=\"dsc\"\r\n            value=\"dsc\"\r\n            checked={order === \"dsc\" ? true : false}\r\n            onChange={(e) => setOrder(e.target.value)}\r\n          />\r\n          <label className=\"dsc\" htmlFor=\"dsc\">\r\n            DSC\r\n          </label>\r\n        </div>\r\n\r\n        <button\r\n          className=\"merge\"\r\n          onClick={() => mergeSort()}\r\n          disabled={disableButton}\r\n        >\r\n          Merge Sort\r\n        </button>\r\n        <button\r\n          className=\"quick\"\r\n          onClick={() => quickSort()}\r\n          disabled={disableButton}\r\n        >\r\n          Quick Sort\r\n        </button>\r\n        <button\r\n          className=\"bubble\"\r\n          onClick={() => bubbleSort()}\r\n          disabled={disableButton}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"heap\"\r\n          onClick={() => heapSort()}\r\n          disabled={disableButton}\r\n        >\r\n          Heap Sort\r\n        </button>\r\n        <button\r\n          className=\"insertion\"\r\n          onClick={() => insertionSort()}\r\n          disabled={disableButton}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n      </div>\r\n      <div className=\"array-container\">\r\n        {array.map((bar, idx) => (\r\n          <div\r\n            className=\"array-bars\"\r\n            key={idx}\r\n            style={{\r\n              height: `${bar}px`,\r\n              width: `${width}px`,\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      {name.length !== 0 ? (\r\n        <div className=\"time-taken\">\r\n          <p className=\"delay\">10ms delay on every single comparison</p>\r\n          <p className=\"time\">\r\n            Time Taken by {name}Sort : {time}s\r\n          </p>\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className=\"down-bar\">\r\n        <div className=\"text\">Project By Mehtab Alam Khan</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction randomNumbers(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","D:\\games\\Projects\\sv-my\\src\\Components\\SortingAlogorithms.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":29,"column":6,"nodeType":"36","endLine":29,"endColumn":14,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":125,"column":9,"nodeType":"40","messageId":"41","endLine":125,"endColumn":14},{"ruleId":"38","severity":1,"message":"42","line":141,"column":11,"nodeType":"40","messageId":"41","endLine":141,"endColumn":22},{"ruleId":"38","severity":1,"message":"43","line":145,"column":9,"nodeType":"40","messageId":"41","endLine":145,"endColumn":17},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetArray'. Either include it or remove the dependency array.","ArrayExpression",["46"],"no-unused-vars","'timer' is assigned a value but never used.","Identifier","unusedVar","'animations2' is assigned a value but never used.","'isChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},"Update the dependencies array to be: [resetArray, slider]",{"range":"49","text":"50"},[899,907],"[resetArray, slider]"]